/* Имя: opendevice.h
 * Проект: библиотека AVR-USB стороны хоста
 * Автор: Christian Starkjohann
 * Перевод: microsin.ru 
 * Дата создания: 2008-04-10
 * Табуляция: 4
 * Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH
 * Лицензия: GNU GPL v2 (см. License.txt) или проприетарная (CommercialLicense.txt)
 * Ревизия: $Id: opendevice.h 553 2008-04-17 19:00:20Z cs $
 */

/*
Основное описание:
Этот модуль предлагает дополнительную функциональность для драйверов, основанных
на libusb или libusb-win32. Он включает функцию для нахождения и открытия устройства,
основываясь на цифровых значениях ID и текстовом описании. Он (модуль) также включает
функцию для получения текстовых описаний от устройства.

Для использования этой функциональности просто скопируйте opendevice.c и opendevice.h 
в Ваш проект и добавьте их к Makefile. Вы можете модифицировать и распространять эти
файлы в соответствии с GNU General Public License (GPL) версии 2.
*/

#ifndef __OPENDEVICE_H_INCLUDED__
#define __OPENDEVICE_H_INCLUDED__

#include <usb.h>    /* это libusb, см. http://libusb.sourceforge.net/ */
#include <stdio.h>

int usbGetStringAscii(usb_dev_handle *dev, int index, char *buf, int buflen);
/* Эта функция получает строковый дескриптор от устройства. Переменная 'index' 
 *  является индексом строкового дескриптора. Строка возвращается в кодировке
 *  ISO Latin 1, в буфере 'buf' и терминируется нулевым символом (ASCIIZ-строка). 
 *  Размер буфера должен быть передан в 'buflen' для защиты от переполнения буфера.
 *  Хендл устройства libusb должен передаваться через 'dev'.
 * Возвращает: длину строки (исключая терминирующий 0) или отрицательное число
 *  в случае ошибки. Если произошла ошибка, используйте usb_strerror() для 
 *  получения сообщения об ошибке.
 */

int usbOpenDevice(usb_dev_handle **device, int vendorID, char *vendorNamePattern, int productID, char *productNamePattern, char *serialNamePattern, FILE *printMatchingDevicesFp, FILE *warningsFp);
/* Эта функция последовательно опрашивает все устройства на всех шинах USB и ишет
 *  устройство. Совпадение проверяется в первую очередь по Vendor- и Product-ID 
 *  (передаваемые в 'vendorID' и 'productID'). ID == 0 соответствует любому 
 *  цифровому ID (wildcard). Когда устройства совпадает по его идентификаторам ID, 
 *  выполняется проверка на совпадение имен. Проверяются текстовое имя вендора 
 *  ('vendorNamePattern'), имя продукта ('productNamePattern') и серийный номер
 *  ('serialNamePattern'). Проверка осуществляется только по паннернам, которые 
 *  имеют ненулевую длину. Если Вам не нужна проверка соответствующего паттерна,
 *  передайте NULL в качестве его параметра. Паттерны с стиле Unix-шелл:
 *  '*' соответствует 0 или большему количеству символов, '?' соответствует
 *  одиночному символу, а список символов в квадратных скобюках соответствует
 *  одному символу из списка (черточки допустимы для указания диапазона) и если
 *  список сомволов начинается с caret ('^'), это означает, что совпадение будет
 *  любым одним символом, НЕ присутствующим в списке.
 * Другие параметры функции: Если 'warningsFp' не NULL, предупреждающие сообщения
 *  печатаются в этот файловый дескриптор функцией fprintf(). Если
 *  'printMatchingDevicesFp' не NULL, устройство не открывается, но совпавшие устройства
 *  печатаются в предоставленный файловый дескриптор функцией fprintf().
 * Если устройство было открыто, результирующий хендл USB сохраняется в '*device'. Здесь 
 *  должен быть передан Указатель на переменную типа "usb_dev_handle *".
 * Возвращает: 0 если все прошло успешно, или код ошибки (см. определения ниже).
 */

/* коды ошибок usbOpenDevice(): */
#define USBOPEN_SUCCESS         0   /* нет ошибки */
#define USBOPEN_ERR_ACCESS      1   /* не хватает разрешений для открытия устройства */
#define USBOPEN_ERR_IO          2   /* ошибка I/O */
#define USBOPEN_ERR_NOTFOUND    3   /* устройство не найдено */


/* Свободные USB ID идентификаторы Obdev, см. для деталей USBID-License.txt */

#define USB_VID_OBDEV_SHARED        5824    /* предоставленный в общий доступ obdev вендор ID */
#define USB_PID_OBDEV_SHARED_CUSTOM 1500    /* предоставленный в общий доступ PID для устройств custom class */
#define USB_PID_OBDEV_SHARED_HID    1503    /* предоставленный в общий доступ PID для устройств HID, за исключением мышей и клавиатур */
#define USB_PID_OBDEV_SHARED_CDCACM 1505    /* предоставленный в общий доступ PID для устройств типа CDC модем */
#define USB_PID_OBDEV_SHARED_MIDI   1508    /* предоставленный в общий доступ PID для устройств MIDI class */

#endif /* __OPENDEVICE_H_INCLUDED__ */
