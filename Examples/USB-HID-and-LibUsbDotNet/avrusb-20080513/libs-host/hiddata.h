/* Имя: hiddata.h
 * Автор: Christian Starkjohann
 * Перевод: microsin.ru 
 * Дата создания: 2008-04-11
 * Табуляция: 4
 * Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH
 * Лицензия: GNU GPL v2 (см. License.txt) или проприетарная (CommercialLicense.txt)
 * Ревизия: $Id: hiddata.h 553 2008-04-17 19:00:20Z cs $
 */

#ifndef __HIDDATA_H_INCLUDED__
#define __HIDDATA_H_INCLUDED__

/*
Основное описание:
Этот модуль реализует уровень абстракции для передачи данных через запросы 
HID feature. Эта релизация использует встроенные (native) функции Windows,
причем при этом не нужно устанавливать драйвер, и libusb на Unix. Вы должны
в любом случае линковать соответствующие библиотеки: "-lhid -lusb -lsetupapi" 
на Windows и `libusb-config --libs` на Unix.
*/

/* ------------------------------------------------------------------------ */

#define USBOPEN_SUCCESS         0   /* нет ошибок */
#define USBOPEN_ERR_ACCESS      1   /* не хватает разрешений для открытия устройства */
#define USBOPEN_ERR_IO          2   /* ошибка I/O */
#define USBOPEN_ERR_NOTFOUND    3   /* устройство не найдено */

/* ------------------------------------------------------------------------ */

typedef struct usbDevice    usbDevice_t;
/* Непрозрачный (opaque) тип данных, представляющий устройство USB. Это может быть хендл Windows
 *  или libusb хендл, в зависимости от реализации backend.
 */

/* ------------------------------------------------------------------------ */

int usbhidOpenDevice(usbDevice_t **device, int vendorID, char *vendorName, int productID, char *productName, int usesReportIDs);
/* Эта функция открывает устройство USB. 'vendorID' и 'productID' являются цифровыми
 *  Vendor-ID и Product-ID устройства, которое необходимо открыть. Если 'vendorName' и
 *  'productName' оба непустые (не NULL), то будут приняты только устройства, у которых 
 *  совпадают строки имен производителя и продукта. Если устройство использует идентификаторы
 *  репорт-ID, параметр 'usesReportIDs' должен иметь ненулевую величину.
 * Возвращает: Если найдено подходящее устройство, возвращается USBOPEN_SUCCESS и 
 *  '*device' устанавливается на непрозрачный (opaque) указатель, представляющих устройство.
 *  Устройство должно быть закрыто функцией usbhidCloseDevice(). Если устройство не найдено,
 *  либо открытие было неудачным, возвращается код ошибки.
 */
void    usbhidCloseDevice(usbDevice_t *device);
/* Каждое устройство, открытое функцией usbhidOpenDevice(), должно быть закрыто этой функцией.
 */
int usbhidSetReport(usbDevice_t *device, char *buffer, int len);
/* Эта функция отправляет feature репорт на устройство. Репорт ID должен быть
 *  в первом байте буфера и длина 'len' репорта указывается с включением этого
 *  репорт ID. Если не успользуются идентификаторы репорт-ID, buffer[0] должен
 *  быть установлен 0 (dummy репорт ID).
 * Возвращает: 0 если все в порядке, иначе код ошибки.
 */
int usbhidGetReport(usbDevice_t *device, int reportID, char *buffer, int *len);
/* Эта функция получает feature репорт от устройства. Запрошенный репорт-ID 
 *  передается в 'reportID'. Вызывающий код должен передать буфер ожидаемой 
 *  длины в 'buffer' и инициализировать перемеенную, на которую указывает
 *  'len' для предоставления размера буфера. На успешном возврате репорт
 *  (с префиксом репорт-ID вначале) появляется в буфере 'buffer' и действительная
 *  длина отчета возвращается в переменной '*len'.
 * Возвращает: 0 если все в порядке, иначе код ошибки.
 */

/* ------------------------------------------------------------------------ */

#endif /* __HIDDATA_H_INCLUDED__ */
