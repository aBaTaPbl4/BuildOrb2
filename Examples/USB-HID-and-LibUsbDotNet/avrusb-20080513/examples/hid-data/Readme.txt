Этот файл Readme для примера hid-data. Здесь мы покажем, как можно обмениваться с устройством USB блоками данных, используя только функционал класса HID. Поскольку драйвера для класса HID включены в Windows, Вам не нужно дополнительно устанавливать драйвера.


ЧТО ТУТ ДЕМОНСТРИРУЕТСЯ?
========================
Этот прример демонстрирует, как класс HID может "неправильно" использоваться для передачи блока данных фиксированного размера (максимально до предела, установленного ограничением размера передачи драйвера) через особенность HID feature reports. Эта техника имеет большое значение для работы совместно с Windows, поскольку не нужны файлы DLL драйвера (пример hid-custom-rq все-таки требует libusb-win32 DLL, хотя он может находится в папке с программой). Программа (host side application) не нуждается в специальной инсталляции, она может запускаться даже с CD. Этот пример также демонстрирует, как передаются данные с помощью функций usbFunctionWrite() и usbFunctionRead().


ПРЕДВАРИТЕЛЬНЫЕ ТРЕБОВАНИЯ
==========================
Целевое железо: Вам нужна схема на AVR, основанная на наших примерах (см. папку "circuits" на верхнем уровне этого пакета), например metaboard (http://www.obdev.at/goto.php?t=metaboard).

Среда разработки AVR: необходим gcc tool chain для AVR, для указаний как его получить см. секцию "ПРЕДВАРИТЕЛЬНЫЕ ТРЕБОВАНИЯ" в файле Readme находящегося на корневом уровне пакета.

Среда разработки хоста: компилятор C и библиотека libusb на Unix. На Windows Вам нужен Driver Development Kit (DDK) взамен libusb. Система MinGW поставляет свободную версию DDK.


СБОРКА FIRMWARE
===============
Перейдите в папку "firmware" и модифицируйте Makefile в соответствии с Вашей архитектурой (частота CPU, тип микроконтролера (target device), значения перемычек (fuse values)) и программатором ISP. Редактируйте usbconfig.h в соответствии с Вашем назначением ножек для D+ and D-. Значение по умолчанию прописаны для платы metaboard.

Введите "make hex" для сборки main.hex, затем "make flash" для загрузки firmware в устройство (с помощью программатора ISP). Не забуьте запустить "make fuse" один раз для программирования перемычек (fuses). Если Вы используете макетную плату с загрузчиком (boot loader), следуйте инструкциям по управлению загрузчиком.

Пожалуйста примите во внимание, что первый вызов "make hex" копирует драйвер из верхнего уровня в папку firmware (копируется папка usbdrv вместе с содержимым). Если Вы используете другую систему компиляции, отличную от нашего Makefile, Вы должны скопировать драйвер вручную.


СБОРКА ПРОГРАММЫ ХОСТА
======================
Удостоверьтесь, что у Вас есть инсталлированные libusb (на Unix) или DDK (на Windows). Мы рекомендуем систему MinGW для Windows, поскольку она включает свободную версию DDK. 
Для сборки перейдите в папку "commandline" и запустите "make" на Unix или "make -f Makefile.windows" на Windows (примечание переводчика: можно запустить make и на Windows, если Вы правильно отредактируете Makefile. На переведенном пакете так и сделано, а оригинальные Makefile сохранены на всякий случай под именем Makefile.orig). 


ИСПОЛЬЗОВАНИЕ ПРОГРАММЫ ХОСТА
=============================
Устройство USB реализует хранение данных из 128 байт в EEPROM AVR. С помощью программы хоста Вы можете послать блок из 128 байт на USB-устройство или прочитать 128 байт с USB-устройства.

Пример отправки блока данных на устройство:

    hidtool write 0x01,0x02,0x03,0x04,...

Пример приема блока с устройства:

    hidtool read


----------------------------------------------------------------------------
(c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH.
http://www.obdev.at/
Перевод http://microsin.ru/
